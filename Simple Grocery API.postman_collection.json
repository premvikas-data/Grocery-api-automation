{
	"info": {
		"_postman_id": "f90fc668-c6ed-4f1d-a784-7174b8b7de4d",
		"name": "Simple Grocery API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44764213"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "Status API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response= pm.response.json()\r",
									"pm.test(\"Status is 200\",function(){\r",
									"    pm.expect(response.status).to.eql('UP');\r",
									"});\r",
									"\r",
									"console.log(response.status)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/status",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response=pm.response.json()\r",
									"const product =response[0]\r",
									"pm.collectionVariables.set('productiId',product.id)\r",
									"pm.test(\"At least one product exsist\",()=>{\r",
									"    pm.expect(response).to.be.an('array')\r",
									"    pm.expect(response.length).to.be.greaterThan(0)\r",
									"    \r",
									"    pm.expect(product).to.be.an('object')\r",
									"    pm.expect(product).to.haveOwnProperty('id')\r",
									"    pm.expect(product).to.haveOwnProperty('inStock')\r",
									"    pm.expect(product.inStock).to.be.true\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products?category=fresh-produce&results=",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "fresh-produce"
								},
								{
									"key": "results",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response=pm.response.json()\r",
									"pm.test(\"Check Name Datatype\",function(){\r",
									"    \r",
									"    pm.expect(response.name).to.be.a('string')\r",
									"});\r",
									"\r",
									"pm.test(\"Check Price Datatype\",function(){\r",
									"    \r",
									"    pm.expect(response.price).to.be.a('number')\r",
									"});\r",
									"\r",
									"pm.test(\"Product Instock\",function(){\r",
									"    \r",
									"    pm.expect(response.inStock).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products/:productId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "4643"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response=pm.response.json();\r",
									"const cartid=response.cartId\r",
									"pm.collectionVariables.set(\"cartid\",cartid)\r",
									"   pm.expect(response).to.haveOwnProperty('cartId')\r",
									"\r",
									"pm.test(\"cart id is available\",()=>{\r",
									"    pm.expect(cartid).to.not.be.null;\r",
									"    pm.expect(response).to.haveOwnProperty('cartId')\r",
									"\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId/items",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response=pm.response.json();\r",
									"pm.collectionVariables.set('itemId',response.itemId)\r",
									"pm.test(\"Item created\", function () {\r",
									"    pm.expect(response.created).to.eql(true);\r",
									"    pm.expect(response).haveOwnProperty('itemId')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"productId\": {{productiId}},\r\n   \"quantity\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId/items",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response=pm.response.json();\r",
									"const orderId=response.orderId\r",
									"pm.collectionVariables.set(\"orderId\",orderId)\r",
									"  \r",
									"\r",
									"pm.test(\"order id is available\",()=>{\r",
									"    pm.expect(orderId).to.not.be.null;\r",
									"    pm.expect(response).to.haveOwnProperty('orderId')\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartid}}\",\r\n    \"customerName\": \"John Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"John Down\",\r\n    \"comment\":\"delivery at 2pm\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders/:orderId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "etteh8Oi9pyWjJPGHW1AI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "api client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Postman on Prem's computer\",\r\n   \"clientEmail\": \"prem@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/api-clients",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing Auth Tests",
			"item": [
				{
					"name": "Missing Header tests",
					"item": [
						{
							"name": "get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Error Message\",function(){\r",
											"    const response =pm.response.json()\r",
											"    pm.expect(response.error).to.eql('Missing Authorization header.');\r",
											"\r",
											"})\r",
											"const response =pm.response.json()"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orders",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Error Message\",function(){\r",
											"    const response =pm.response.json()\r",
											"    pm.expect(response.error).to.eql('Missing Authorization header.');\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"zvG3QTKZcFiSdD6K8iq2j\",\r\n    \"customerName\": \"John Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orders",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Invalid Input",
			"item": [
				{
					"name": "get all Products invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Error Message\",function(){\r",
									"    const response =pm.response.json()\r",
									"    pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'category'\");\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products?category=invalid&results=",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid"
								},
								{
									"key": "results",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all Products Results max",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Error Message\",function(){\r",
									"    const response =pm.response.json()\r",
									"    pm.expect(response.error).to.eql(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\");\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products?category=&results=21",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": ""
								},
								{
									"key": "results",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all Products Results min",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Error Message\",function(){\r",
									"    const response =pm.response.json()\r",
									"    pm.expect(response.error).to.eql(\"Invalid value for query parameter 'results'. Must be greater than 0.\");\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products?category=&results=-1",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": ""
								},
								{
									"key": "results",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://simple-grocery-store-api.glitch.me",
			"type": "default"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "productiId",
			"value": ""
		},
		{
			"key": "cartid",
			"value": ""
		},
		{
			"key": "itemId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}